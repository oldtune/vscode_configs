// Place your key bindings in this file to override the defaults
[
  //remap down
  {
    "key": "ctrl+j",
    "command": "cursorDown",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+j",
    "command": "notebook.focusNextEditor",
    "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'"
  },
  {
    "key": "ctrl+j",
    "command": "settings.action.focusSettingsFile",
    "when": "inSettingsSearch && !suggestWidgetVisible"
  },
  {
    "key": "ctrl+j",
    "command": "showNextParameterHint",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "key": "ctrl+j",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+j",
    "command": "breadcrumbs.selectFocused",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "ctrl+j",
    "command": "history.showNext",
    "when": "historyNavigationForwardsEnabled && historyNavigationWidget && !suggestWidgetVisible"
  },
  {
    "key": "ctrl+j",
    "command": "interactive.history.next",
    "when": "!suggestWidgetVisible && resourceScheme == 'vscode-interactive' && interactiveInputCursorAtBoundary != 'none' && interactiveInputCursorAtBoundary != 'top'"
  },
  {
    "key": "ctrl+j",
    "command": "list.focusDown",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+j",
    "command": "notifications.focusNextToast",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "key": "ctrl+j",
    "command": "scm.viewNextCommit",
    "when": "scmInputIsInLastPosition && scmRepository && !suggestWidgetVisible"
  },
  {
    "key": "ctrl+j",
    "command": "settings.action.focusSettingsFromSearch",
    "when": "inSettingsSearch && !suggestWidgetVisible"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.interactivePlayground.arrowDown",
    "when": "interactivePlaygroundFocus && !editorTextFocus"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.banner.focusNextAction",
    "when": "bannerFocused"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.statusBar.focusNext",
    "when": "statusBarFocused"
  },
  {
    "key": "ctrl+j",
    "command": "extension.vim_down",
    "when": "editorTextFocus && vim.active && !inDebugRepl && !parameterHintsVisible && !suggestWidgetVisible"
  },
  //remap up
  {
    "key": "ctrl+k",
    "command": "cursorUp",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+k",
    "command": "notebook.focusPreviousEditor",
    "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'"
  },
  {
    "key": "ctrl+k",
    "command": "showPrevParameterHint",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+k",
    "command": "history.showPrevious",
    "when": "historyNavigationBackwardsEnabled && historyNavigationWidget && !suggestWidgetVisible"
  },
  {
    "key": "ctrl+k",
    "command": "interactive.history.previous",
    "when": "!suggestWidgetVisible && resourceScheme == 'vscode-interactive' && interactiveInputCursorAtBoundary != 'bottom' && interactiveInputCursorAtBoundary != 'none'"
  },
  {
    "key": "ctrl+k",
    "command": "list.focusUp",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+k",
    "command": "notifications.focusPreviousToast",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "key": "ctrl+k",
    "command": "scm.viewPreviousCommit",
    "when": "scmInputIsInFirstPosition && scmRepository && !suggestWidgetVisible"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.interactivePlayground.arrowUp",
    "when": "interactivePlaygroundFocus && !editorTextFocus"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.banner.focusPreviousAction",
    "when": "bannerFocused"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.statusBar.focusPrevious",
    "when": "statusBarFocused"
  },
  {
    "key": "ctrl+k",
    "command": "extension.vim_up",
    "when": "editorTextFocus && vim.active && !inDebugRepl && !parameterHintsVisible && !suggestWidgetVisible"
  },
  //comment
  {
    "key": "ctrl+/",
    "command": "editor.action.addCommentLine",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+/",
    "command": "notebook.cell.collapseCellInput",
    "when": "notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed"
  },
  {
    "key": "ctrl+/",
    "command": "notebook.cell.expandCellInput",
    "when": "notebookCellInputIsCollapsed && notebookCellListFocused"
  },
  {
    "key": "ctrl+oem_2",
    "command": "-editor.action.commentLine",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+k ctrl+oem_2",
    "command": "-editor.foldAllBlockComments",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+oem_2",
    "command": "-toggleExplainMode",
    "when": "suggestWidgetVisible"
  },
  {
    "key": "ctrl+oem_2",
    "command": "-workbench.action.terminal.sendSequence",
    "when": "terminalFocus",
    "args": {
      "text": "\u001f"
    }
  },
  //uncomment
  {
    "key": "ctrl+shift+oem_2",
    "command": "editor.action.removeCommentLine",
    "when": "editorTextFocus && !editorReadonly"
  },
  //terminal
  {
    "key": "ctrl+\\",
    "command": "workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },
  //alt + number
  {
    "key": "alt+u",
    "command": "workbench.action.openEditorAtIndex1"
  },
  {
    "key": "alt+i",
    "command": "workbench.action.openEditorAtIndex2"
  },
  {
    "key": "alt+o",
    "command": "workbench.action.openEditorAtIndex3"
  },
  {
    "key": "alt+p",
    "command": "workbench.action.openEditorAtIndex4"
  },
  {
    "key": "alt+j",
    "command": "workbench.action.openEditorAtIndex5"
  },
  {
    "key": "alt+k",
    "command": "workbench.action.openEditorAtIndex6"
  },
  {
    "key": "alt+l",
    "command": "workbench.action.openEditorAtIndex7"
  },
  {
    "key": "alt+;",
    "command": "workbench.action.openEditorAtIndex8"
  },
  {
    "key": "alt+m",
    "command": "workbench.action.openEditorAtIndex9"
  },
  //toggle secondary sidebar
  {
    "key": "ctrl+shift+b",
    "command": "workbench.action.toggleAuxiliaryBar"
  },
  {
    "key": "ctrl+j",
    "command": "selectNextCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "enter",
    "command": "acceptSelectedCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "ctrl+r ctrl+r",
    "command": "workbench.action.reloadWindow"
  },
  //unload
  {
    "key": "ctrl+u",
    "command": "-cursorUndo"
  },
  //panel
  {
    "key": "ctrl+'",
    "command": "workbench.action.toggleMaximizedPanel"
  },
  {
    "key": "alt+f alt+e",
    "command": "workbench.files.action.focusFilesExplorer"
  },
  {
    "key": "alt+8 alt+8",
    "command": "workbench.action.toggleStatusbarVisibility"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.quickOpenSelectNext",
    "when": "!textInputFocus && inQuickOpen"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.quickOpenSelectPrevious",
    "when": "!textInputFocus && inQuickOpen"
  },
  {
    "key": "alt+f alt+f",
    "command": "search.action.openNewEditor"
  }
]
